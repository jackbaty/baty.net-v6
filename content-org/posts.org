#+hugo_base_dir: ../
#+hugo_section: ./

#+hugo_weight: auto
#+hugo_auto_set_lastmod: t
#+hugo_front_matter_format: yaml
#+hugo_front_matter_key_replace: description>summary author>nil
#+category: blog


* 2021
:PROPERTIES:
:EXPORT_HUGO_SECTION: post/2021
:END:
** DONE Local theme development when using Hugo Modules :hugo:@Tech:
:PROPERTIES:
:EXPORT_FILE_NAME: local-theme-development-when-using-hugo-modules
:EXPORT_DATE: <2021-05-27 Thu>
:END:

Recent versions of Hugo prefer the use of go "modules" for managing themes. This is new and a little weird to me, but I'm slowly beginning to understand it. I'm documenting the process here so I don't forget.

#+hugo: more

I've forked an original theme ([[https://github.com/olOwOlo/hugo-theme-even][Even]]) for use here. To tell Hugo where the theme is, I added the following to my site's config.toml...

#+begin_src toml
[module]
[[module.imports]]
    path = "github.com/jackbaty/hugo-theme-even"
    disabled = false
#+end_src

With this in place, running =hugo mod get= will do its magic and use the code in the referenced Github repo as the site's theme. By default, modules seem to mount in "themes/", so this just works. It feels a little magic because nothing actually lives in "themes/". This took some gatting used to.

But with the site using code from a (remote) repo, how do I work on the theme locally? I don't want to have to make a change in a local repo, then commit-push-get to test every little change. After some digging, I learned that Hugo has a [[https://gohugo.io/hugo-modules/configuration/#module-config-top-level]["replacements" feature in modules]].

Replacements allow Hugo to temporarily use other mounts/modules. I only want to use my local copy of the theme while doing development, so I added the replacement as an environment variable in .zshrc like so:

#+begin_src sh
export HUGO_MODULE_REPLACEMENTS="github.com/jackbaty/hugo-theme-even -> /Users/jbaty/dev/hugo-theme-even"
#+end_src

Now, when running hugo serve locally, it picks up my local repo automatically, but server builds will use the "real" repo from Github. Clever.



** DONE Grok TiddlyWiki :tiddlywiki:
:PROPERTIES:
:EXPORT_FILE_NAME: grok-tiddlywiki
:EXPORT_DATE: <2021-05-26 Wed>
:END:

[[https://sorenbjornstad.com/][Soren Bjornstad]] has recently released the first edition of [[https://groktiddlywiki.com/read/][Grok TiddlyWiki]] and it's terrific.


#+begin_quote
Grok TiddlyWiki is a textbook that helps you build a deep, lasting understanding of and proficiency with TiddlyWiki through a combination of detailed explanations, practical exercises, and spaced-repetition reviews of prompts called takeaways.
#+end_quote

#+hugo: more

A chief complaint about TiddlyWiki is that it’s difficult to learn. This is not unfounded. The documentation is complete, but hard to parse and there are few resources for actually learning TiddlyWiki. Grok TiddlyWiki is a fantastic resource and if you’re even remotely interested in learning more about TiddlyWiki, it’s highly recommended. My goodness, TiddlyWiki is amazing.

** DONE I forget how fun ox-hugo is :@Meta:hugo:orgmode:
:PROPERTIES:
:EXPORT_FILE_NAME: i-forget-how-fun-ox-hugo-is
:EXPORT_DATE: <2021-05-25 Tue>
:ID:       3942bdfb-50c1-41d1-be0b-eec21b615047
:END:

[[https://ox-hugo.scripter.co][ox-hugo]] is "an Org exporter backend that exports Org to Hugo-compatible Markdown (Blackfriday) and also generates the front-matter (in TOML or YAML format)."

It's more fun than it sounds.
#+hugo: more

I've used ox-hugo before, but I end up either drifting away from Org mode and/or Hugo and forget what a powerful combination ox-hugo, Org mode, and Hugo can be.

The great thing is that I have all my posts in a single Org file, each as its own heading. Each heading is rendered as individual Markdown files with Hugo-compatible frontmatter.

A few highlights:

- I use an org timestamp for the entry date and add posts.org to my agenda files so I see what I posted on a given day in my org agenda.
- I have a yasnippet that helps me fill in the post metadata
- Posts are rendered automatically when saving via local variable: =# eval: (org-hugo-auto-export-mode)=

The posts.org frontmatter looks like this...

#+begin_example org
#+hugo_base_dir: ../
#+hugo_section: ./

#+hugo_weight: auto
#+hugo_auto_set_lastmod: t
#+hugo_front_matter_format: yaml
#+hugo_front_matter_key_replace: description>summary author>nil
#+category: blog
#+end_example

And then an individual post heading looks like this...

#+begin_example org
DONE I forget how fun ox-hugo is :@Meta:hugo:orgmode:
:PROPERTIES:
:EXPORT_FILE_NAME: i-forget-how-fun-ox-hugo-is
:EXPORT_DATE: <2021-05-25 Tue>
:ID:       3942bdfb-50c1-41d1-be0b-eec21b615047
:END:
#+end_example


* About
:PROPERTIES:
:EXPORT_HUGO_SECTION: /
:EXPORT_HUGO_BUNDLE: about
:EXPORT_FILE_NAME: index
:END:

{{% figure class="center" src="jack-headshot-400.jpg" title="Your host, Jack Baty" alt="portrait" %}}


Start here: [[https://www.baty.net/][baty.net]]

or here: [[https://copingmechanism.com][copingmechanism.com]]

or here: [[https://rudimentarylathe.org][rudimentarylathe.org]]

Email: [[mailto:jack@baty.net][jack@baty.net]]


* Footnotes
* COMMENT Local Variables                                           :ARCHIVE:
# Local Variables:
# org-hugo-footer: "\n\n[//]: # \"Exported with love from a post written in Org mode\"\n[//]: # \"- https://github.com/kaushalmodi/ox-hugo\""
# eval: (org-hugo-auto-export-mode)
# End:
