#+hugo_base_dir: ../
#+hugo_section: ./

#+hugo_weight: nil
#+hugo_auto_set_lastmod: t
#+hugo_front_matter_format: yaml
#+hugo_front_matter_key_replace: description>summary author>nil
#+category: blog


* 2021
:PROPERTIES:
:EXPORT_HUGO_SECTION: post/2021
:END:
** TODO Running Doom and Nano emacs at the same time using Chemacs :@Tech:emacs:
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: doom-and-nano-at-same-time-chemacs
:EXPORT_FILE_NAME: index
:EXPORT_DATE: <2021-05-31 Mon 09:30>
:END:

Most of the time I use a [[https://github.com/hlissner/doom-emacs][Doom Emacs]] configuration, but sometimes I feel like testing something new. I've been enamored by [[https://github.com/rougier/nano-emacs][Nano Emacs]] lately, but there's no way I'll switch to it permanently.

Today I learned about [[https://github.com/plexus/chemacs2][Chemacs]].

#+hugo: more

#+begin_quote
Chemacs 2 is an Emacs profile switcher, it makes it easy to run multiple Emacs configurations side by side.
#+end_quote

So I configured Chemacs and added profiles for my default Doom config and also one for Nano. This is crazy, but I can now run both configurations /at the same time/!. Here's a screenshot. The left window is Org-journal in Nano and the right window is my org-mode configuration in Doom.

[[file:two-emacs.png]]

Here's a helpful video showing how it all works: https://www.youtube.com/watch?v=hHdM2wVM1PI



** DONE I no longer enjoy writing code :@Tech:
:PROPERTIES:
:EXPORT_FILE_NAME: i-no-longer-enjoy-writing-code
:EXPORT_DATE: <2021-05-31 Mon>
:END:

I was never a great programmer, but I was a pretty good /developer/. By this I mean that I could solve real problems for people by writing software.

#+hugo: more

I don't enjoy coming up with clever algorithms and I hate math. But most development is just storage and retrieval of data, and I like storing, retrieving, and displaying data.

But I no longer enjoy writing code. I'm not sure why. I think maybe it's because in recent years at Fusionary, my role moved away from programming. This meant I no longer kept up with details of the latest techniques and trends. I knew what was being done and (most of the time) why, but the ability to actually do any of it got away from me.

Now that I've lagged so far behind "state of the art," it feels impossible to catch up. I've made furtive attempts, but end up a frustrated old man yelling at clouds. I don't think this is all my fault. I believe things have become way over-complicated and overwrought, caused by too many devs reading blog posts about how Facebook or Pinterest does things and then assuming that's the way everyone should do things. Too clever by half.

But, I admit that the way I did things isn't nearly good enough today. Maybe that's why I give up so quickly. It's not fun like it was in the Good Old Days™. At least it's not fun for me.

Front-end web dev is, to me, mired in frameworks and "best practices" that maybe shouldn't be.
Maybe it's not that I don't like writing code, maybe it's the bog-standard JavaScript-riddled front end development I don't like. Perhaps I should look into Ops, or ML or AI or AR. Maybe learn Go or Clojure or, if I'm feeling feisty, Rust.

Or maybe instead I should just get that paper route I always wanted.
** DONE Local theme development when using Hugo Modules :hugo:@Tech:
:PROPERTIES:
:EXPORT_FILE_NAME: local-theme-development-when-using-hugo-modules
:EXPORT_DATE: <2021-05-27 Thu>
:END:

Recent versions of [[https://gohugo.io][Hugo]] prefer the use of [[https://blog.golang.org/using-go-modules][Go Modules]] for managing themes. This is new and a little weird to me, but I'm slowly beginning to understand it. I'm documenting the process here so I don't forget.

#+hugo: more

I've forked an original theme ([[https://github.com/olOwOlo/hugo-theme-even][Even]]) for use here. To tell Hugo where the theme is, I added the following to my site's config.toml...

#+begin_src toml
[module]
[[module.imports]]
    path = "github.com/jackbaty/hugo-theme-even"
    disabled = false
#+end_src

With this in place, running =hugo mod get= will do its magic and use the code in the referenced Github repo as the site's theme. By default, modules seem to mount in "themes/", so this just works. It feels a little magic because nothing actually lives in "themes/". This took some getting used to.

But with the site using code from a (remote) repo, how do I work on the theme locally? I don't want to have to make a change in a local repo, then commit-push-get to test every little change. After some digging, I learned that Hugo has a [[https://gohugo.io/hugo-modules/configuration/#module-config-top-level]["replacements" feature in modules]].

Replacements allow Hugo to temporarily use other mounts/modules. I only want to use my local copy of the theme while doing development, so I added the replacement as an environment variable in .zshrc like so:

#+begin_src sh
export HUGO_MODULE_REPLACEMENTS="github.com/jackbaty/hugo-theme-even -> /Users/jbaty/dev/hugo-theme-even"
#+end_src

Now, when running hugo serve locally, it picks up my local repo automatically, but server builds will use the "real" repo from Github. Clever.

And so far, all of this "Just Works" when deploying to Netlify.

UPDATE: I've learned that in order for Hugo/Netlify to pick up changes to the remote theme repo, there must be a "release" created in Github.

** DONE Grok TiddlyWiki :tiddlywiki:
:PROPERTIES:
:EXPORT_FILE_NAME: grok-tiddlywiki
:EXPORT_DATE: <2021-05-26 Wed>
:END:

[[https://sorenbjornstad.com/][Soren Bjornstad]] has recently released the first edition of [[https://groktiddlywiki.com/read/][Grok TiddlyWiki]] and it's terrific.

#+begin_quote
Grok TiddlyWiki is a textbook that helps you build a deep, lasting understanding of and proficiency with TiddlyWiki through a combination of detailed explanations, practical exercises, and spaced-repetition reviews of prompts called takeaways.
#+end_quote

#+hugo: more

A chief complaint about TiddlyWiki is that it’s difficult to learn. This is not unfounded. The documentation is complete, but hard to parse and there are few resources for actually learning TiddlyWiki. Grok TiddlyWiki is a fantastic resource and if you’re even remotely interested in learning more about TiddlyWiki, it’s highly recommended. My goodness, TiddlyWiki is amazing.

** DONE I almost forgot how fun ox-hugo is :@Meta:hugo:orgmode:
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: i-forgot-how-fun-ox-hugo-is
:EXPORT_FILE_NAME: index
:EXPORT_DATE: <2021-05-25 Tue>
:ID:       3942bdfb-50c1-41d1-be0b-eec21b615047
:END:

[[https://ox-hugo.scripter.co][ox-hugo]] is "an Org exporter backend that exports Org to Hugo-compatible Markdown (Blackfriday) and also generates the front-matter (in TOML or YAML format)."

It's more fun than it sounds.
#+hugo: more

I've used ox-hugo before, but I end up either drifting away from Org mode and/or Hugo and forget what a powerful combination ox-hugo, Org mode, and Hugo can be.

The great thing is that I have all my posts in a single Org file, each as its own heading. Each heading is rendered as individual Markdown files with Hugo-compatible frontmatter.

A few highlights:

- I use an org timestamp for the entry date and add posts.org to my agenda files so I see what I posted on a given day in my org agenda.
- I have a yasnippet that helps me fill in the post metadata
- Posts are rendered automatically when saving via local variable: =# eval: (org-hugo-auto-export-mode)=

The posts.org frontmatter looks like this...

#+begin_example org
#+hugo_base_dir: ../
#+hugo_section: ./

#+hugo_weight: auto
#+hugo_auto_set_lastmod: t
#+hugo_front_matter_format: yaml
#+hugo_front_matter_key_replace: description>summary author>nil
#+category: blog
#+end_example

And then an individual post heading looks like this...

#+begin_example org
DONE I forget how fun ox-hugo is :@Meta:hugo:orgmode:
:PROPERTIES:
:EXPORT_FILE_NAME: i-forget-how-fun-ox-hugo-is
:EXPORT_DATE: <2021-05-25 Tue>
:ID:       3942bdfb-50c1-41d1-be0b-eec21b615047
:END:
#+end_example


Here's the (ya)snippet:

#+begin_src org
# -*- mode: snippet -*-
# name: Hugo
# key: hugo
# uuid: hugo
# --
TODO ${1:title}
:PROPERTIES:
:EXPORT_FILE_NAME: ${1:$(replace-regexp-in-string " " "-" (downcase yas-text))}
:EXPORT_DATE:
:END:

$0
#+end_src


And here's what the org document looks like in Emacs.

[[file:posts.png]]

There's a whole blog in there!

* About
:PROPERTIES:
:EXPORT_HUGO_SECTION: /
:EXPORT_HUGO_BUNDLE: about
:EXPORT_FILE_NAME: index
:END:

{{% figure class="center" src="jack-headshot-400.jpg" title="Your host, Jack Baty" alt="portrait" %}}


Start here: [[https://www.baty.net/][baty.net]]

or here: [[https://copingmechanism.com][copingmechanism.com]]

or here: [[https://rudimentarylathe.org][rudimentarylathe.org]]

Email: [[mailto:jack@baty.net][jack@baty.net]]


* Footnotes
* COMMENT Local Variables                                           :ARCHIVE:
# Local Variables:
# org-hugo-footer: "\n\n[//]: # \"Exported with love from a post written in Org mode\"\n[//]: # \"- https://github.com/kaushalmodi/ox-hugo\""
# eval: (org-hugo-auto-export-mode)
# End:
